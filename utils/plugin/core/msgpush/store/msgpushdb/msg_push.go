// Code generated by gowebx, DO AVOID EDIT.
package msgpushdb

import (
	"context"
	"easydarwin/utils/pkg/orm"
	"easydarwin/utils/plugin/core/msgpush"

	"gorm.io/gorm"
)

var _ msgpush.MsgPushStorer = MsgPush{}

// MsgPush Related business namespaces
type MsgPush struct {
	db *gorm.DB
}

// NewMsgPush instance object
func NewMsgPush(db *gorm.DB) MsgPush {
	return MsgPush{db: db}
}

// Find implements msgpush.MsgPushStorer.
func (d MsgPush) Find(ctx context.Context, bs *[]*msgpush.MsgPush, page orm.Pager, args ...orm.QueryOption) (int64, error) {
	return orm.FindWithContext(ctx, d.db, bs, page, args...)
}

// Get implements msgpush.MsgPushStorer.
func (d MsgPush) Get(ctx context.Context, b *msgpush.MsgPush, args ...orm.QueryOption) error {
	return orm.FirstWithContext(ctx, d.db, b, args...)
}

// Add implements msgpush.MsgPushStorer.
func (d MsgPush) Add(ctx context.Context, b *msgpush.MsgPush) error {
	return d.db.WithContext(ctx).Create(b).Error
}

// Edit implements msgpush.MsgPushStorer.
func (d MsgPush) Edit(ctx context.Context, b *msgpush.MsgPush, fn func(*msgpush.MsgPush), args ...orm.QueryOption) error {
	return orm.UpdateWithContext(ctx, d.db, b, fn, args...)
}

// Del implements msgpush.MsgPushStorer.
func (d MsgPush) Del(ctx context.Context, b *msgpush.MsgPush, args ...orm.QueryOption) error {
	return orm.DeleteWithContext(ctx, d.db, b, args...)
}
